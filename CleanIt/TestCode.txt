
using NewsReader.RT.Client.Foundation.Base;
using NewsReader.RT.Client.Foundation.Services;

using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
using Windows.ApplicationModel.Activation;
using Windows.ApplicationModel;
using Windows.Foundation.Collections;
using Windows.Foundation;
using Windows.Storage;
using Windows.UI.Xaml.Controls.Primitives;
using Windows.UI.Xaml.Controls;
using Windows.UI.Xaml.Data;
using Windows.UI.Xaml.Input;
using Windows.UI.Xaml.Media;
using Windows.UI.Xaml.Navigation;
using Windows.UI.Xaml;

// The Split App template is documented at http://go.microsoft.com/fwlink/?LinkId=234228

namespace NewsReader.RT.Client.UI
{

    /// <summary>
    /// Provides application-specific behavior to supplement the default Application class.
    /// </summary>
    sealed partial class App : Application
    {
	private string j;

        /// <summary>
        /// Invoked when application execution is being suspended.  Application state is saved
        /// without knowing whether the application will be terminated or resumed with the contents
        /// of memory still intact.
        /// </summary>
        /// <param name="sender">The source of the suspend request.</param>
        /// <param name="e">Details about the suspend request.</param>
        private async void OnSuspending(object sender, SuspendingEventArgs e)
        {
        }
	
	private int i;

        private async void App_UnhandledException(object sender, UnhandledExceptionEventArgs e)
        {
            LogService.Error(e.Exception);

            var crashLog = await ApplicationData.Current.LocalFolder.CreateFileAsync("log.crash", CreationCollisionOption.ReplaceExisting);
            await FileIO.WriteTextAsync(crashLog, e.Exception.ToString());
        }

	#region A
        /// <summary>
        /// Initializes the singleton Application object.  This is the first line of authored code
        /// executed, and as such is the logical equivalent of main() or WinMain().
        /// </summary>
        public App()
        {
            this.InitializeComponent();
            this.Suspending += OnSuspending;
            this.UnhandledException += App_UnhandledException;
        }

	#region

	public event Action MyEvent2;

        /// <summary>
        /// Invoked when the application is launched normally by the end user.  Other entry points
        /// will be used when the application is launched to open a specific file, to display
        /// search results, and so forth.
        /// </summary>
        /// <param name="args">Details about the launch request and process.</param>
        protected override async void OnLaunched(LaunchActivatedEventArgs args)
        {
        }

	protected DateTime dt;


        public App(bool a)
	{
	}

	public event Action MyEvent1;
    }
}
