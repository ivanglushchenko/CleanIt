using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace BetterWpfControls
{
    public class CollapsibleGridSplitter : GridSplitter
    {
        #region .ctors

        static CollapsibleGridSplitter()
        {
        }

        public CollapsibleGridSplitter()
        {
        }

        #endregion .ctors

		/// <summary>
        /// Gets/sets Type.
        /// </summary>
        public ComparisionType Type
        {
            [System.Diagnostics.DebuggerStepThrough]
            get { return p_Type; }
            [System.Diagnostics.DebuggerStepThrough]
            set
            {
                if (p_Type != value)
                {
                    p_Type = value;
                    OnPropertyChanged("Type");
                    OnTypeChanged();
                }
            }
        }
        private ComparisionType p_Type;
        partial void OnTypeChanged();

        #region Fields

        private UIElement _collapsiblePane;
        private GridDefinition _collapsiblePaneGridInfo;
        private ContentAdorner _adorner;
        private Button _button;

        #endregion Fields

        #region Properties

        public Dock CollapseDirection
        {
            get { return (Dock)GetValue(CollapseDirectionProperty); }
            set { SetValue(CollapseDirectionProperty, value); }
        }

        // Using a DependencyProperty as the backing store for CollapseDirection.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty CollapseDirectionProperty =
            DependencyProperty.Register("CollapseDirection", typeof(Dock), typeof(CollapsibleGridSplitter), new UIPropertyMetadata(Dock.Left));

		public class InternalClass
		{
			private int A;
		}

        public double? Value
        {
            get { return (double?)GetValue(ValueProperty); }
            set { SetValue(ValueProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Value.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty ValueProperty =
            DependencyProperty.Register("Value", typeof(double?), typeof(CollapsibleGridSplitter), new UIPropertyMetadata(double.NaN));

        public GridLength? DefaultValue
        {
            get { return (GridLength?)GetValue(DefaultValueProperty); }
            set { SetValue(DefaultValueProperty, value); }
        }

        // Using a DependencyProperty as the backing store for DefaultValue.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty DefaultValueProperty =
            DependencyProperty.Register("DefaultValue", typeof(GridLength?), typeof(CollapsibleGridSplitter), new UIPropertyMetadata(null));

        public bool CollapseOnly
        {
            get { return (bool)GetValue(CollapseOnlyProperty); }
            set { SetValue(CollapseOnlyProperty, value); }
        }

        // Using a DependencyProperty as the backing store for CollapseOnly.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty CollapseOnlyProperty =
            DependencyProperty.Register("CollapseOnly", typeof(bool), typeof(CollapsibleGridSplitter), new UIPropertyMetadata(false, (s, e) => ((CollapsibleGridSplitter)s).OnCollapseOnlyChanged(e)));

        private void OnCollapseOnlyChanged(DependencyPropertyChangedEventArgs e)
        {
        }

        #endregion Properties

        #region Methods

        private void SmartGridSplitter_Loaded(object sender, RoutedEventArgs e)
        {
        }

        private void _collapsiblePaneGridInfo_IsCollapsedChanged(bool obj)
        {
        }

        protected override void OnPreviewMouseDown(MouseButtonEventArgs e)
        {
        }

        private void SetGripCursor()
        {
        }

        protected override void OnMouseDoubleClick(MouseButtonEventArgs e)
        {
        }

        void button_Click(object sender, RoutedEventArgs e)
        {
        }

        protected override void OnMouseUp(MouseButtonEventArgs e)
        {
        }

        private void UpdateValue()
        {
        }

        private void SmartGridSplitter_IsVisibleChanged(object sender, DependencyPropertyChangedEventArgs e)
        {
        }

        #endregion Methods
    }
}
